#!/bin/bash
set +e

hotspotver="V0.910"
opt1="$1"
opt2="$2"
opt3="$3"
opt4="$4"
#
snam="hotspot"
eth_dev="eth0"
wl0_dev="wlan0"
wl1_dev="wlan1"
ap_dev="ap0"
ap_devmac="b8:27:eb:00:00:00"
ap_net="10.3.141"
ns_dom="local"
#
ap_ip="${ap_net}.1"
ap_subn="${ap_net}.255"
ap_ipanet="${ap_net}.1/24"
ap_iptsubn="${ap_net}.0/24"
ap_revip=`echo "$ap_ip" | awk -F "." '{ print $4"."$3"."$2"."$1 }'`
ap_revnet=`echo "$ap_ip" | awk -F "." '{ print $3"."$2"."$1 }'`
# find best channels
chans2ghz=`iwlist "$wl0_dev" scan | grep -i "Frequency:2" | sort | uniq -c | sort -n | awk '/hannel / { print $5 }' | sed 's/[^0-9]*//g' | tr '\n' ' '`
chans5ghz=`iwlist "$wl0_dev" scan | grep -i "Frequency:5" | sort | uniq -c | sort -n | awk '/hannel / { print $5 }' | sed 's/[^0-9]*//g' | tr '\n' ' '`
chan2ghz=`echo "$chans2ghz" | awk '{print $1}'`
chan5ghz=`echo "$chans5ghz" | awk '{print $1}'`
if [ "$chan2ghz" == "" ]; then chan2ghz="6";  fi
if [ "$chan5ghz" == "" ]; then chan5ghz="36"; fi
#
wpactrl="/var/run/wpa_supplicant"
wpasupg="/etc/wpa_supplicant/wpa_supplicant.conf"
wpasupif="/etc/wpa_supplicant/wpa_supplicant-wlan0.conf"
hostapdf="/etc/hostapd/hostapd.conf"
dnsmasqf="/etc/dnsmasq.conf"
crdaf="/etc/default/crda"
hostn="`hostname`"
# spot_ssid="${hostn}-hotspot"  # <hostname>-hotspot
spot_ssid="`echo "$hostn" | sed 's/./\U&/g'`wlan-`cat /sys/class/net/$wl0_dev/address | awk -F ":" '{print $4$5$6}'`"  # <HOSTNAME>wlan-<lastMAC3byte>
spot_psk="hallohallo"
spot_cntry2="DE"

function Hotspot_Defines {
  eth_ip=`ip addr show dev "$eth_dev" 2>/dev/null   | awk '/inet / { print $2 }'`
  wl0_ip=`ip addr show dev "$wl0_dev" 2>/dev/null   | awk '/inet / { print $2 }'`
  eth_subn=`ip addr show dev "$eth_dev" 2>/dev/null | awk '/inet / { print $4 }'`
  wl0_subn=`ip addr show dev "$wl0_dev" 2>/dev/null | awk '/inet / { print $4 }'`
  wl1_mac=`ip addr show dev "$wl1_dev" 2>/dev/null  | awk '/ether / { print $2 }'`
  if [ "$wl1_mac" != "" ]; then wl1_avail="yes"; else wl1_avail="no"; fi
  if [ "$eth_subn" != "$ap_subn" ] && { [ "$eth_subn" == "$wl0_subn" ] || [ "$wl0_subn" == "" ]; }; then hs_try="yes"; else hs_try="no"; fi
}

function Show_Defines {
  echo `date +"%Y-%m-%d %T"` "eth_dev:$eth_dev eth_subn:$eth_subn ap_ipanet:$ap_ipanet"
  echo `date +"%Y-%m-%d %T"` "wl0_dev:$wl0_dev wl0_subn:$wl0_subn wl0_ip:$wl0_ip"
  echo `date +"%Y-%m-%d %T"` "hs_try:$hs_try $wl1_dev avail: $wl1_avail"
  echo `date +"%Y-%m-%d %T"` "ch2:$ch2 ch5:$ch5"
}

function fil_bck {
  if [ "$1" != "" ] && [ -f "$1" ]
  then
    if [ "$2" != "" ]; then fn="$1.$2"; else fn="$1.old"; fi
    cp "$1" "$fn"
  fi
}

function Hotspot_Status {
# echo `date +"%Y-%m-%d %T"` "Status Hotspot ..."
  ps ax | grep wpa_ ; ip a ; hostname -I
}

function Mod_Para {
  cfil="file_not_valid"
  if [ "$1" == "hostapd" ]; then cfil="$hostapdf"; fi
  if [ "$1" == "dnsmasq" ]; then cfil="$dnsmasqf"; fi
  if [ "$1" == "crda" ];    then cfil="$crdaf"; fi
  if [ "$1" == "self" ];    then cfil="$0"; fi
  if [ "$cfil" != "file_not_valid" ]; then
    logger -s -t $snam "  change  $1 $2=$3 ($cfil)"
    sed -i -r "s/$2[ ]*=.*/$2=$3/g" "$cfil"
  else
    echo "  Mod_Para invalid file selector $1"
  fi
}

function use_iptables {
  if [ "`grep -c -F "useiptables=1" "$hostapdf"`" -gt "0" ]; then
    if [ "$1" == "add" ] || [ "$1" == "del" ]; then
      logger -s -t $snam "  IPtables $1"
      if [ "$1" == "add" ]; then opt="-A"; else opt="-D"; fi
      iptables -t nat $opt POSTROUTING -s $ap_iptsubn ! -d $ap_iptsubn -j MASQUERADE
      iptables $opt FORWARD -i $eth_dev -o $ap_dev -m state --state RELATED,ESTABLISHED -j ACCEPT
      iptables $opt FORWARD -i $ap_dev -o $eth_dev -j ACCEPT
# Tor proxy
#     iptables -t nat $opt PREROUTING -i $ap_dev -p tcp --syn -j REDIRECT --to-ports 9040
    else
      logger -s -t $snam "  IPtables invalid option $1"
    fi
  fi
}

function chk_wpa_fil {
  if [ -f "$wpasupg" ]; then
    logger -s -t $snam "  WARNING $wpasupg not for specific interface $wl0_dev"
    if [ ! -f "$wpasupif" ]; then
      logger -s -t $snam "  mv $wpasupg $wpasupif"
      mv $wpasupg $wpasupif
    else
      logger -s -t $snam "  cp $wpasupg ${wpasupg}_YYYYMMDDhhmmss"
      cp $wpasupg ${wpasupg}_`date +"%Y%m%d%H%M%S"`
      rm $wpasupg
    fi
  fi
}

function stop_ap_dev {
  ip link set dev "$ap_dev" down
  ip addr flush dev "$ap_dev"
}

function inst_ap_dev {
  if [ "$wl0_dev" != "$ap_dev" ]; then
    logger -s -t $snam "  install and check dev $ap_dev"
    apnet255=`ip addr show dev "$ap_dev" 2>/dev/null | awk '/inet / { print $4 }'`
    if [ "$ap_subn" != "$apnet255" ]; then
      logger -s -t $snam "  assign  dev $ap_dev $ap_ipanet"
      iw dev $wl0_dev interface add $ap_dev type __ap
      stop_ap_dev
#     ip link set $ap_dev address $ap_devmac
      ip a add "$ap_ipanet" brd + dev "$ap_dev"
      ip link set dev "$ap_dev" up
    fi
    logger -s -t $snam "  install dev $ap_dev done"
  fi
}

function wlan {
  if [ "$wl1_avail" != "yes" ]; then wl_dev="$wl0_dev"; else wl_dev="$wl1_dev"; fi
  if [ "$2" != "" ]; then wl_dev="$2"; fi
  case "$1" in
        start)
#           chk_wpa_fil
            logger -s -t $snam "  start   wlan ($wl_dev)"
            wpa_supplicant -B -i $wl_dev -c $wpasupif >/dev/null 2>&1
            ;;
        stop)
#           chk_wpa_fil
            logger -s -t $snam "  stop    wlan ($wl_dev)"
            wpa_cli -p $wpactrl -i $wl_dev terminate >/dev/null 2>&1
            ;;
        *)
            echo "Usage: $snam wlan start|stop"
            exit 1
  esac
}

function do_tor {
  case "$1" in
        start)
            logger -s -t $snam "  start   tor (experimental)"
            iptables -F
            iptables -t nat -F
            iptables -t nat -A PREROUTING -i ap0 -p tcp --dport 22 -j REDIRECT --to-ports 22
            iptables -t nat -A PREROUTING -i ap0 -p udp --dport 53 -j REDIRECT --to-ports 53
            iptables -t nat -A PREROUTING -i ap0 -p tcp --syn -j REDIRECT --to-ports 9040

            service tor restart
            ;;
        stop)
            logger -s -t $snam "  stop    tor (experimental)"
            service tor stop
            iptables -t nat -D PREROUTING -i ap0 -p tcp --syn -j REDIRECT --to-ports 9040
            ;;
        *)
            echo "Usage: $snam tor start|stop"
            exit 1
  esac
}

function do_syslog {
  if [ "$1" != "" ]; then lins="-A $1"; else lins=""; fi
  tail -500 /var/log/syslog | grep -a $lins "${snam}:"
}

function Mdfy_Chan {
  hf=`iw phy | grep -ciF "VHT Capabilities"`
  logger -s -t $snam "  modify  channel strategy: $1"
  logger -s -t $snam "  chans   2Ghz pref: $chan2ghz avail: $chans2ghz"
  logger -s -t $snam "  chans   5Ghz pref: $chan5ghz avail: $chans5ghz"
  if [ "$2" != "" ]; then
    ch="$2"
  else
    if [ "$hf" -ge "1" ]; then ch="$chan5ghz"; else ch="$chan2ghz"; fi
  fi
  if [ "$ch" -le "14" ]; then
    hm="g"
  else
    hm="a"
    if [ "$ch" -gt "48" ]; then
      logger -s -t $snam "  channel $ch can cause problem"
    fi
  fi
  logger -s -t $snam "  channel select: $ch hw_mode: $hm"
  Mod_Para "hostapd" "channel" "$ch"
  Mod_Para "hostapd" "hw_mode" "$hm"
}

function Hotspot_Start {
  Hotspot_Defines
  logger -s -t $snam "starting  hotspot $eth_dev $eth_ip $wl0_dev $wl0_ip"
# chk_wpa_fil
  if [ "$1" == "nowlan" ]; then wlan stop; fi
  logger -t $snam "  stop    hostapd"
  systemctl stop hostapd
  logger -t $snam "  stop    dnsmasq"
  systemctl stop dnsmasq
  chanw=`iwlist $wl0_dev channel | awk '/urrent / { print $5 }' | sed 's/)//g'`
  chanh=`cat "$hostapdf" | awk '/channel=/ { print $1 }' | sed 's/channel=//g'`
  if [ "$chanw" != "$chanh" ] && [ "$chanw" != "" ] && [ "$wl1_avail" != "yes" ]; then
    Mdfy_Chan "select same channel for ap & station mode" "$chanw" "$chanh"
  else
    Mdfy_Chan "select best fitting channel for ap mode (least used)"
  fi
  echo 1 > /proc/sys/net/ipv4/ip_forward
  inst_ap_dev
  sleep 5
  use_iptables add
  logger -s -t $snam "  start   dnsmasq"
  systemctl restart dnsmasq
  sleep 2
  logger -s -t $snam "  start   hostapd (restart)"
  systemctl restart  hostapd
  logger -s -t $snam "started   hotspot"

  if [ "`grep -c -F "nodogsplashstart=1" "$hostapdf"`" -gt "0" ]; then
    logger -s -t $snam "start     captive portal (nodogsplash)"
    nodogsplash
  fi

  if [ "`grep -c -F "torstart=1" "$hostapdf"`" -gt "0" ]; then
    do_tor start
  fi
}

function Hotspot_Try {
  logger -s -t $snam "trying    hotspot"
  sleep 20     # let wlan settle
  Hotspot_Defines
  if [ "$hs_try" == "yes" ]; then
    logger -s -t $snam "  try     hotspot"
    Hotspot_Start nowlan
  else
    if [ "$wl0_subn" != "" ] && [ "$wl0_subn" != "$ap_subn" ]; then
      logger -s -t $snam "  ap&sta  start hotspot in parallel to station mode (experimental not activated)"
#     Hotspot_Start wlan
    else
      logger -s -t $snam "  ERR: subnet conflict $eth_dev $eth_subn $wl0_dev $wl0_subn $ap_dev $ap_subn"
    fi
  fi
}

function Hotspot_Stop {
  logger -s -t $snam "stopping  hotspot"
# chk_wpa_fil
  logger -s -t $snam "  stop       hostapd"
  systemctl stop hostapd
  sleep 2
  logger -s -t $snam "  stop       dnsmasq"
  systemctl stop dnsmasq
  echo 0 > /proc/sys/net/ipv4/ip_forward
  use_iptables del
  sleep 2
  if [ "$1" != "nowlan" ]; then
    wlan start
    sleep 10
  fi
  logger -s -t $snam "  link    down dev $ap_dev"
  stop_ap_dev
  logger -s -t $snam "stopped   hotspot"
}

function Hotspot_Setup {
  echo `date +"%Y-%m-%d %T"` "Setup  Hotspot $1 $2 ..."
  if [ "$1" != "noswpkg" ]; then
    echo `date +"%Y-%m-%d %T"` "install sw packages"
    apt-get -qy install iw hostapd dnsmasq tor
  fi
# disable/stop services. starting by script if needed
  systemctl disable dnsmasq.service >/dev/null 2>&1
  systemctl stop    dnsmasq.service >/dev/null 2>&1
  systemctl disable hostapd.service >/dev/null 2>&1
  systemctl stop    hostapd.service >/dev/null 2>&1
  update-rc.d tor   disable >/dev/null 2>&1
  service tor stop  >/dev/null 2>&1

  bckext=`date +"%Y%m%d%H%M%S"`

  fil="/etc/rc.local"
  fil_bck "$fil" "$bckext"
  echo `date +"%Y-%m-%d %T"` "create $fil"
  cat <<EOF > "$fil"
#!/bin/sh -e
#file autocreated, do not edit
#

if [ "\`grep -c -F "autostart=1" "/etc/hostapd/hostapd.conf"\`" -gt "0" ]; then
  hotspot try >/tmp/hotspot.log 2>&1 &
fi

# Print the IP address
_IP=\$(hostname -I) || true
if [ "\$_IP" ]; then
  logger -s -t hotspot "My IP address is \$_IP"
fi

exit 0
EOF
  chmod 750 "$fil"

  fil="/etc/sysctl.conf"
  fil_bck "$fil" "$bckext"
# net.ipv4.ip_forward=1
  grep -q -F "net.ipv4.ip_forward=" $fil || echo "net.ipv4.ip_forward=" >> $fil
  sed -r -i 's/net\.ipv4\.ip_forward[ ]*=.*/net\.ipv4\.ip_forward=1/g' $fil
  sed -r -i 's/#net\.ipv4\.ip_forward=1/net\.ipv4\.ip_forward=1/g' $fil

  fil="/etc/dhcpcd.conf"
  fil_bck "$fil" "$bckext"
  echo `date +"%Y-%m-%d %T"` "create $fil"
  cat <<EOF > "$fil"
hostname
clientid
persistent
option rapid_commit
option domain_name_servers, domain_name, domain_search, host_name
option classless_static_routes
option ntp_servers
option interface_mtu
require dhcp_server_identifier
slaac private

timeout 25

denyinterfaces ap0
interface ap0
  nohook wpa_supplicant
  #static ip_address=10.3.141.1/24
EOF
  chmod 664 "$fil"
  chown root:netdev "$fil"

  fil="/etc/dnsmasq.conf"
  fil_bck "$fil" "$bckext"
  echo `date +"%Y-%m-%d %T"` "create $fil"
  cat <<EOF > "$fil"
dhcp-mac=set:client_is_a_pi,B8:27:EB:*:*:*
dhcp-reply-delay=tag:client_is_a_pi,2

# Never forward plain names (without a dot or domain part)
domain-needed
no-dhcp-interface=eth0,wlan0
listen-address=$ap_ip
listen-address=127.0.0.1
bind-interfaces

#==========[ NAMESERVER ]==========#

no-hosts # Do not read /etc/hosts
# Read additional hosts-file (not only /etc/hosts) to add entries into DNS
#addn-hosts=/etc/dnsmasq_static_hosts.conf
expand-hosts
domain=$ns_dom
local=/$ns_dom/$ap_ip

# Host & PTR & Reverse
host-record=$hostn.$ns_dom,$ap_ip
server=/$ap_revnet.in-addr.arpa/$ap_ip
ptr-record=$ap_revip.in-addr.arpa,$hostn.$ns_dom

#==========[ DHCP ]==========#

dhcp-range=$ap_net.50,$ap_net.199,255.255.255.0,12h
dhcp-option=option:router,$ap_ip
#dhcp-option=option:ntp-server,$ap_ip

dhcp-option=vendor:MSFT,2,1i # Tell MS Windows to release a lease on shutdown
dhcp-option=44,$ap_ip    # set netbios-over-TCP/IP aka WINS
dhcp-option=45,$ap_ip    # netbios datagram distribution server
dhcp-option=46,8             # netbios node type
dhcp-option=252,"\n"         # REQUIRED to get win7 to behave

# DHCPv4 Should be set when dnsmasq is definitely the only DHCP server on a network
#dhcp-authoritative
# DHCPv4 Server will attempt to ensure that an address is not in use before allocating it to a host
#no-ping

#==========[ etc ]==========#

log-facility=/var/log/syslog
#log-queries
#log-dhcp
log-async
local-ttl=2
local-service
localise-queries
EOF
  chmod 644 "$fil"

  fil="/etc/default/hostapd"
  fil_bck "$fil" "$bckext"
  echo `date +"%Y-%m-%d %T"` "create $fil"
  cat <<EOF > "$fil"
#RUN_DAEMON=yes
DAEMON_CONF="/etc/hostapd/hostapd.conf"
EOF
  chmod 600 "$fil"

  fil="/etc/hostapd/hostapd.conf"
  fil_bck "$fil" "$bckext"
  echo `date +"%Y-%m-%d %T"` "create $fil (pls. adjust SSID, PWD and country code)"
  cat <<EOF > "$fil"
#start#### do not remove next few lines ######
#autostart=0
#useiptables=0
#torstart=0
#nodogsplashstart=0
#end###### used by hotspot script ############

ctrl_interface=/var/run/hostapd
ctrl_interface_group=0
interface=ap0
driver=nl80211

channel=6
hw_mode=g
country_code=$spot_cntry2
ssid=$spot_ssid
wpa_passphrase=$spot_psk

wpa=2
wpa_key_mgmt=WPA-PSK
wpa_pairwise=TKIP
rsn_pairwise=CCMP

ieee80211n=1
ieee80211d=1
ieee80211ac=1
wmm_enabled=1
macaddr_acl=0
ignore_broadcast_ssid=0
auth_algs=1

logger_syslog=-1
logger_syslog_level=4
logger_stdout=-1
logger_stdout_level=4
EOF
  Mdfy_Chan "select default channel"
  Mod_Para  "hostapd" "autostart" "1"
  chmod 640 "$fil"

  fil="/etc/tor/torrc"
  fil_bck "$fil" "$bckext"
  echo `date +"%Y-%m-%d %T"` "create $fil"
  cat <<EOF > "$fil"
Log notice file /var/log/tor-notices.log
VirtualAddrNetwork 10.192.0.0/10
AutomapHostsSuffixes .onion,.exit
AutomapHostsOnResolve 1
TransPort 10.3.141.1:9040
DNSPort 10.3.141.1:53
EOF
  chmod 644 "$fil"
  touch /var/log/tor-notices.log >/dev/null 2>&1
  chown debian-tor /var/log/tor-notices.log >/dev/null 2>&1
  chmod 644 /var/log/tor-notices.log >/dev/null 2>&1
}

Hotspot_Defines

case "$opt1" in
        try)
            Hotspot_Try   "$opt2"
            ;;
      start)
            Hotspot_Start "$opt2"
            ;;
       stop)
            Hotspot_Stop  "$opt2"
            ;;
    restart)
            Hotspot_Stop   nowlan
            logger -s -t $snam "  20sec  settle time"
            sleep 20
            Hotspot_Start "$opt2"
            ;;
      retry)
            Hotspot_Stop   nowlan
            logger -s -t $snam "  20sec  settle time"
            sleep 20
            Hotspot_Try   "$opt2"
            ;;
       wlan)
            wlan          "$opt2"
            ;;
     modpar)
            Mod_Para      "$opt2" "$opt3" "$opt4"
            ;;
    setchan)
            Mdfy_Chan     "given_by_cli" "$opt2" "given_by_cli"
            ;;
      setup)
            Hotspot_Setup "$opt2" "$opt3"
            ;;
     syslog)
            do_syslog     "$opt2"
            ;;
        tor)
            do_tor        "$opt2"
            ;;
    version)
            echo "$hotspotver"
            ;;
     status)
            Hotspot_Status
            ;;
          *)
  echo "Usage: $snam try | start [nowlan] | stop [nowlan] | retry | restart [nowlan] | status | setup | setchan [channel] | syslog [lines] | tor [start|stop] | modpar <crda|dnsmasq|hostapd> <name> [value] | version | wlan [start|stop]"
  exit 1
esac

